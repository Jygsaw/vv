'  1 import { navigateTo } from 'lib/routes';¬                                                      ',
'  2 ¬                                                                                              ',
'  3 export default ({ dispatch }) => next => (action) => {¬                                        ',
'  4   const {¬                                                                                     ',
'  5     callAPI,¬                                                                                  ',
'  6     payload = {},¬                                                                             ',
'  7     postProcess = response => response.data,¬                                                  ',
'  8     redirectTo = undefined,¬                                                                   ',
'  9   } = action;¬                                                                                 ',
' 10   let { types } = action;¬                                                                     ',
' 11 ¬                                                                                              ',
' 12   if (!types) {¬                                                                               ',
' 13     // Normal action: pass it on¬                                                              ',
' 14     return next(action);¬                                                                      ',
' 15   }¬                                                                                           ',
' 16 ¬                                                                                              ',
' 17   if (typeof types === 'string') {¬                                                            ',
' 18     types = [¬                                                                                 ',
' 19       `${types}_REQUEST`,¬                                                                     ',
' 20       `${types}_SUCCESS`,¬                                                                     ',
' 21       `${types}_FAILURE`,¬                                                                     ',
' 22     ];¬                                                                                        ',
' 23   }¬                                                                                           ',
' 24 ¬                                                                                              ',
' 25   if (¬                                                                                              ',
' 26     !Array.isArray(types) ||¬                                                                                              ',
' 27     types.length !== 3 ||¬                                                                                              ',
' 28     !types.every(type => typeof type === 'string')¬                                                                                              ',
' 29   ) {¬                                                                                              ',
' 30     throw new Error('Expected an array of three string types.');¬                                                                                              ',
' 31   }¬                                                                                              ',
' 32 ¬                                                                                              ',
' 33   if (typeof callAPI !== 'function') {¬                                                                                              ',
' 34     throw new Error('Expected callAPI to be a function.');¬                                                                                              ',
' 35   }¬                                                                                              ',
' 36   if (typeof postProcess !== 'function') {¬                                                                                              ',
' 37     throw new Error('Expected normalize to be a function.');¬                                                                                              ',
' 38   }¬                                                                                              ',
' 39 ¬                                                                                              ',
' 40   const [requestType, successType, failureType] = types;¬                                                                                              ',
' 41 ¬                                                                                              ',
' 42   dispatch(Object.assign({}, payload, {¬                                                                                              ',
' 43     type: requestType,¬                                                                                              ',
' 44   }));¬                                                                                              ',
' 45 ¬                                                                                              ',
' 46   return callAPI().then( // TODO: catch 401 error and refresh token/logout¬                                                                                              ',
' 47     (response) => {¬                                                                                              ',
' 48       const postProcessedResponse = postProcess(response);¬                                                                                              ',
' 49       const d = dispatch(Object.assign({}, payload, {¬                                                                                              ',
' src/api/call-api-middleware.js                                                                                                                                                                                                                         ',                                          1/66'  1
'"src/api/call-api-middleware.js" 66L, 1640C                                                                                              ',
